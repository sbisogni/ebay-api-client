package ebay

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

// ErrorResponse reports errors or warning generated by the eBay API.Check for details.
// Check for details https://developer.ebay.com/api-docs/static/handling-error-messages.html
type ErrorResponse struct {
	Response *http.Response
	Message  string
	Errors   []ErrorData `json:"errors"`
	Warnings []ErrorData `json:"warnings"`
}

// ErrorData encodes API error or warning details.
// Check for details https://developer.ebay.com/api-docs/static/handling-error-messages.html
type ErrorData struct {
	ErrorID     int              `json:"errorId"`
	Domain      string           `json:"domain"`
	Category    string           `json:"category"`
	Message     string           `json:"message"`
	LongMessage string           `json:"longMessage"`
	Parameters  []ErrorDataParam `json:"parameters"`
}

// ErrorDataParam provides details about which parameter/value generated the error or the warning
type ErrorDataParam struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (e *ErrorResponse) Error() string {

	var log []string

	log = append(log, e.Message)
	log = append(log, HTTPRequestToString(e.Response.Request))
	log = append(log, fmt.Sprintf("Respose Code: %d", e.Response.StatusCode))
	log = append(log, fmt.Sprintf("Erros: %+v", e.Errors))
	log = append(log, fmt.Sprintf("Warnings: %+v", e.Warnings))

	return strings.Join(log, "\n")
}

// NewErrorResponse creates a new ErrorResponse from the http response
func NewErrorResponse(rs *http.Response) *ErrorResponse {

	status := rs.StatusCode
	// if response is successful (200-299), do nothing
	if http.StatusOK <= status && status < http.StatusMultiStatus {
		return nil
	}

	errorResponse := &ErrorResponse{
		Response: rs,
		Message:  "API Error",
	}
	data, err := ioutil.ReadAll(rs.Body)
	if err == nil && data != nil {
		err := json.Unmarshal(data, errorResponse)
		if err != nil {
			errorResponse.Message = string(data)
		}
	}

	return errorResponse
}

// HTTPRequestToString transforms the given HTTP Request in a string
func HTTPRequestToString(rq *http.Request) string {
	if rq == nil {
		return "HTTP Request is <nil>"
	}

	var request []string
	request = append(request, fmt.Sprintf("%v %v %v", rq.Method, rq.URL, rq.Proto))
	request = append(request, fmt.Sprintf("Host: %v", rq.Host))

	for name, headers := range rq.Header {
		for _, val := range headers {
			request = append(request, fmt.Sprintf("%v: %v", name, val))
		}
	}

	return strings.Join(request, "\n")

}
